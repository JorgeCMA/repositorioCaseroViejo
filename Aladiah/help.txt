*User
-post
register // user
login // user/login
verificar(?) user/verify
-get
user(?) user/:idUser
users(?) // users
-put
updateUser user
-delete
deleteUser user/:idUser
deleteUserAdmin user/:id/admin/:idAdmin

*Post
-post 
post // post
-get
post // post/:idPost
posts // posts/:idSubtheme
posts // posts/score
-put
post // post/user/:idUser
post // post/admin/:idAdmin
-delete
post // post/:idPost/user/:idUser
post // post/:idPost/admin/:idAdmin

*Theme
-get
themes // themes
-post
theme // theme/admin/:idAdmin
-put
theme // theme/admin/:idAdmin
-delete
theme // theme/:idTheme/admin/:idAdmin

*Subtheme
-get
subthemes // subthemes
subthemes // subthemes/:idTheme
-post
subtheme // subtheme/admin/:idAdmin
-put
subtheme // subtheme/admin/:idAdmin
-delete
subtheme // subtheme/:idSubtheme/admin/:idAdmin

*PostTypes
-get
post_types // post_types

----------
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'Aladiah'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('Aladiah');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('Aladiah app is running!');
  });
});
